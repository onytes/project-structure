#!/usr/bin/python
import os
import sys
import getopt

def usage():
    lines = ["Usage:",
             "",
             "-r --runserver: runserver ",
             "-u --update: update db",
             "-p --port [port]",
             "-i --ip [ip]",
             "-s --settings [settings]",
             "-h --shell",
             "-h --help"]
    print '\n'.join(lines)

def main():
    #default values
    manage_commads =  []
    e = {}
    e['env'] = '../venv-p3'
    e['p'] = '8000'
    e['ip'] = '0.0.0.0'
    e['settings'] = 'onytes.settings.local'


    if sys.argv[1:] == []:
        usage()
        sys.exit(2)

    try:
        opts, _args = getopt.getopt(sys.argv[1:],
                                    'hrup:i:s:l', ['help', 'runserver', 'update', 'port=', 'ip=', 'settings=', '--shell'])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(2)
        elif opt in ('-r', '--runserver'):
            manage_commads.append('runserver')
        elif opt in ('-u', '--update'):
            manage_commads.append('syncdb')
        elif opt in ('-p', '--port'):
            e['p'] = arg
        elif opt in ('-i', '--ip'):
            e['ip'] = arg
        elif opt in ('-s', '--settings'):
            e['settings'] = arg
        elif opt in ('-l', '--shell'):
            manage_commads.append('shell')
        else:
            usage()
            sys.exit(2)

    script_template = 'bash -c "source %(env)s/bin/activate && python manage.py %(cmd)s --settings=%(settings)s"'
    for manage_cmd in manage_commads:
        if manage_cmd == 'runserver':
            e['cmd'] = manage_cmd + ' %(ip)s:%(p)s' % e
        else:
            e['cmd'] = manage_cmd
        script = script_template % e
        print script
        os.system(script)


if __name__ == "__main__":
    main()